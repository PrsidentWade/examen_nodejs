# 🎓 Application Web de Gestion des Étudiants

Bienvenue dans ce projet de gestion des étudiants développé avec **Express.js**, **EJS**, **PostgreSQL** et **bcrypt**. Cette application permet aux administrateurs de gérer les étudiants à travers une interface web simple et sécurisée.

---

## 🚀 Fonctionnalités Principales

- ✅ **Inscription & Connexion**
  - Création de compte et connexion utilisateur
  - Hachage sécurisé des mots de passe avec `bcrypt`

- 🔐 **Gestion des Sessions**
  - Maintien de la session avec `express-session`

- 🛂 **Gestion des Rôles**
  - Deux rôles utilisateurs :
    - **Administrateur** : Accès complet (CRUD)
    - **Utilisateur simple** : Accès en lecture seule

- 👨‍🎓 **CRUD Étudiants**
  - Ajouter, modifier, supprimer et consulter les étudiants (admin uniquement)

- 📊 **Statistiques**
  - Visualisation des statistiques (ex : nombre d’étudiants par sexe)

- 🛡️ **Sécurité**
  - Protection des routes avec des middlewares (`isAuthenticated`, `isAdmin`)

---

## 🧩 Architecture et Fonctionnement

### ⚙️ Configuration
- Initialisation du serveur Express
- Configuration du moteur de vues **EJS**
- Déclaration des fichiers statiques
- Configuration de `express-session` pour gérer les sessions

### 🧱 Middlewares

- `isAuthenticated` : vérifie si l'utilisateur est connecté
- `isAdmin` : vérifie si l'utilisateur est un administrateur

### 🗺️ Routes

| Méthode | Route             | Description                                          | Accès       |
|---------|-------------------|------------------------------------------------------|-------------|
| GET     | `/register`       | Formulaire d'inscription                             | Public      |
| POST    | `/register`       | Traitement de l'inscription                          | Public      |
| GET     | `/login`          | Formulaire de connexion                              | Public      |
| POST    | `/login`          | Traitement de la connexion                           | Public      |
| GET     | `/logout`         | Déconnexion de l’utilisateur                         | Authentifié |
| GET     | `/`               | Liste des étudiants + statistiques                   | Authentifié |
| GET     | `/add`            | Formulaire d’ajout d’un étudiant                     | Admin       |
| POST    | `/add`            | Traitement de l’ajout d’un étudiant                  | Admin       |
| GET     | `/edit/:id`       | Formulaire de modification d’un étudiant             | Admin       |
| POST    | `/edit/:id`       | Traitement de la modification d’un étudiant          | Admin       |
| GET     | `/delete/:id`     | Suppression d’un étudiant                            | Admin       |

---

## 🔁 Exemple de Scénario Utilisateur

1. 📝 L'utilisateur s'inscrit via `/register`
2. 🔐 Il se connecte via `/login`
3. 🎛️ S'il est **admin**, il accède aux fonctionnalités de gestion des étudiants
4. 📃 Tous les utilisateurs connectés voient la liste des étudiants et les statistiques

---

## 🧪 Sécurité Intégrée

- 🔒 Mots de passe hachés avec `bcrypt`
- 🔐 Routes critiques protégées par des middlewares personnalisés
- 🛡️ Sessions sécurisées pour maintenir l’authentification

---

## 🛠️ Technologies Utilisées

| Outil / Lib        | Rôle                                 |
|--------------------|--------------------------------------|
| **Express.js**     | Serveur web backend                  |
| **EJS**            | Moteur de rendu côté serveur         |
| **PostgreSQL**     | Base de données relationnelle        |
| **bcrypt**         | Sécurité des mots de passe           |
| **express-session**| Gestion des sessions utilisateurs    |

---

## 📌 Conclusion

Ce projet constitue une base complète et évolutive pour toute application de gestion avec rôles, sécurité et statistiques. N'hésitez pas à forker, contribuer ou adapter à vos besoins !


## 📦 Installation (optionnel)

```bash
git clone https://github.com/votre-utilisateur/votre-projet.git
cd votre-projet
npm init
npm install express pg ejs body-parser dotenv
npm 
